{"version":3,"mappings":"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","names":["yesOrNoRecord","transformRecordToOption","getLocalIcons","__vitePreload","item","_a","LAYOUT_PREFIX","VIEW_PREFIX","FIRST_LEVEL_ROUTE_COMPONENT_SPLIT","getLayoutAndPage","component","layout","page","layoutOrPage","pageItem","getLayout","getPage","transformLayoutAndPageToComponent","hasLayout","hasPage","getRoutePathByRouteName","routeName","getPathParamFromRoutePath","routePath","path","param","getRoutePathWithParam","props","__props","emit","__emit","visible","_useModel","formRef","validate","resetFields","useAntdForm","defaultRequiredRule","useFormRules","title","computed","add","$t","addChild","edit","operateType","model","ref","createDefaultModel","menuType","menuName","pathParam","i18nKey","icon","iconType","parentId","status","keepAlive","constant","order","href","hideInMenu","activeMenu","multiTab","fixedIndexInTab","query","buttons","rules","disabledMenuType","localIconOptions","map","label","_createVNode2","SvgIcon","value","showLayout","showPage","pageOptions","allPages","includes","unshift","layoutOptions","roleOptions","getRoleOptions","error","data","fetchGetAllRoles","options","roleName","roleCode","addQuery","index","splice","key","removeQuery","addButton","code","desc","removeButton","handleInitModel","rowData","nextTick","id","Object","assign","rest","closeDrawer","handleUpdateRoutePathByRouteName","handleUpdateI18nKeyByRouteName","getSubmitParams","params","handleSubmit","console","log","window","$message","success","watch","_isSlot","s","prototype","toString","call","_isVNode","bool","setTrue","openModal","useBoolean","tableWrapperRef","scrollConfig","useTableScroll","columns","columnChecks","loading","pagination","getData","getDataByPage","useTable","apiFn","fetchGetMenuList","align","dataIndex","width","customRender","record","tagMap","menuTypeRecord","Tag","default","minWidth","undefined","localIcon","enableStatusRecord","hide","Y","N","_slot","_slot2","_slot3","Button","onClick","handleAddChildMenu","handleEdit","Popconfirm","onConfirm","handleDelete","checkedRowKeys","rowSelection","onBatchDeleted","onDeleted","useTableOperate","handleAdd","handleBatchDelete","editingData","getAllPages","pages","fetchGetAllPages","init"],"ignoreList":[],"sources":["../../src/constants/common.ts","../../src/utils/icon.ts","../../src/views/manage/menu/modules/shared.ts","../../src/views/manage/menu/modules/menu-operate-modal.vue","../../src/views/manage/menu/index.vue"],"sourcesContent":["import { transformRecordToOption } from '@/utils/common';\n\nexport const yesOrNoRecord: Record<CommonType.YesOrNo, App.I18n.I18nKey> = {\n  Y: 'common.yesOrNo.yes',\n  N: 'common.yesOrNo.no'\n};\n\nexport const yesOrNoOptions = transformRecordToOption(yesOrNoRecord);\n","export function getLocalIcons() {\n  const svgIcons = import.meta.glob('/src/assets/svg-icon/*.svg');\n\n  const keys = Object.keys(svgIcons)\n    .map(item => item.split('/').at(-1)?.replace('.svg', '') || '')\n    .filter(Boolean);\n\n  return keys;\n}\n","const LAYOUT_PREFIX = 'layout.';\nconst VIEW_PREFIX = 'view.';\nconst FIRST_LEVEL_ROUTE_COMPONENT_SPLIT = '$';\n\nexport function getLayoutAndPage(component?: string | null) {\n  let layout = '';\n  let page = '';\n\n  const [layoutOrPage = '', pageItem = ''] = component?.split(FIRST_LEVEL_ROUTE_COMPONENT_SPLIT) || [];\n\n  layout = getLayout(layoutOrPage);\n  page = getPage(pageItem || layoutOrPage);\n\n  return { layout, page };\n}\n\nfunction getLayout(layout: string) {\n  return layout.startsWith(LAYOUT_PREFIX) ? layout.replace(LAYOUT_PREFIX, '') : '';\n}\n\nfunction getPage(page: string) {\n  return page.startsWith(VIEW_PREFIX) ? page.replace(VIEW_PREFIX, '') : '';\n}\n\nexport function transformLayoutAndPageToComponent(layout: string, page: string) {\n  const hasLayout = Boolean(layout);\n  const hasPage = Boolean(page);\n\n  if (hasLayout && hasPage) {\n    return `${LAYOUT_PREFIX}${layout}${FIRST_LEVEL_ROUTE_COMPONENT_SPLIT}${VIEW_PREFIX}${page}`;\n  }\n\n  if (hasLayout) {\n    return `${LAYOUT_PREFIX}${layout}`;\n  }\n\n  if (hasPage) {\n    return `${VIEW_PREFIX}${page}`;\n  }\n\n  return '';\n}\n\n/**\n * Get route name by route path\n *\n * @param routeName\n */\nexport function getRoutePathByRouteName(routeName: string) {\n  return `/${routeName.replace(/_/g, '/')}`;\n}\n\n/**\n * Get path param from route path\n *\n * @param routePath route path\n */\nexport function getPathParamFromRoutePath(routePath: string) {\n  const [path, param = ''] = routePath.split('/:');\n\n  return {\n    path,\n    param\n  };\n}\n\n/**\n * Get route path with param\n *\n * @param routePath route path\n * @param param path param\n */\nexport function getRoutePathWithParam(routePath: string, param: string) {\n  if (param.trim()) {\n    return `${routePath}/:${param}`;\n  }\n\n  return routePath;\n}\n","<script setup lang=\"tsx\">\nimport { computed, nextTick, ref, watch } from 'vue';\nimport { SimpleScrollbar } from '@sa/materials';\nimport { useAntdForm, useFormRules } from '@/hooks/common/form';\nimport { $t } from '@/locales';\nimport { enableStatusOptions, menuIconTypeOptions, menuTypeOptions } from '@/constants/business';\nimport SvgIcon from '@/components/custom/svg-icon.vue';\nimport { getLocalIcons } from '@/utils/icon';\nimport { fetchGetAllRoles } from '@/service/api';\nimport {\n  getLayoutAndPage,\n  getPathParamFromRoutePath,\n  getRoutePathByRouteName,\n  getRoutePathWithParam,\n  transformLayoutAndPageToComponent\n} from './shared';\n\ndefineOptions({\n  name: 'MenuOperateModal'\n});\n\nexport type OperateType = AntDesign.TableOperateType | 'addChild';\n\ninterface Props {\n  /** the type of operation */\n  operateType: OperateType;\n  /** the edit menu data or the parent menu data when adding a child menu */\n  rowData?: Api.SystemManage.Menu | null;\n  /** all pages */\n  allPages: string[];\n}\n\nconst props = defineProps<Props>();\n\ninterface Emits {\n  (e: 'submitted'): void;\n}\n\nconst emit = defineEmits<Emits>();\n\nconst visible = defineModel<boolean>('visible', {\n  default: false\n});\n\nconst { formRef, validate, resetFields } = useAntdForm();\nconst { defaultRequiredRule } = useFormRules();\n\nconst title = computed(() => {\n  const titles: Record<OperateType, string> = {\n    add: $t('page.manage.menu.addMenu'),\n    addChild: $t('page.manage.menu.addChildMenu'),\n    edit: $t('page.manage.menu.editMenu')\n  };\n  return titles[props.operateType];\n});\n\ntype Model = Pick<\n  Api.SystemManage.Menu,\n  | 'menuType'\n  | 'menuName'\n  | 'routeName'\n  | 'routePath'\n  | 'component'\n  | 'order'\n  | 'i18nKey'\n  | 'icon'\n  | 'iconType'\n  | 'status'\n  | 'parentId'\n  | 'keepAlive'\n  | 'constant'\n  | 'href'\n  | 'hideInMenu'\n  | 'activeMenu'\n  | 'multiTab'\n  | 'fixedIndexInTab'\n> & {\n  query: NonNullable<Api.SystemManage.Menu['query']>;\n  buttons: NonNullable<Api.SystemManage.Menu['buttons']>;\n  layout: string;\n  page: string;\n  pathParam: string;\n};\n\nconst model = ref(createDefaultModel());\n\nfunction createDefaultModel(): Model {\n  return {\n    menuType: '1',\n    menuName: '',\n    routeName: '',\n    routePath: '',\n    pathParam: '',\n    component: '',\n    layout: '',\n    page: '',\n    i18nKey: null,\n    icon: '',\n    iconType: '1',\n    parentId: 0,\n    status: '1',\n    keepAlive: false,\n    constant: false,\n    order: 0,\n    href: null,\n    hideInMenu: false,\n    activeMenu: null,\n    multiTab: false,\n    fixedIndexInTab: null,\n    query: [],\n    buttons: []\n  };\n}\n\ntype RuleKey = Extract<keyof Model, 'menuName' | 'status' | 'routeName' | 'routePath'>;\n\nconst rules: Record<RuleKey, App.Global.FormRule> = {\n  menuName: defaultRequiredRule,\n  status: defaultRequiredRule,\n  routeName: defaultRequiredRule,\n  routePath: defaultRequiredRule\n};\n\nconst disabledMenuType = computed(() => props.operateType === 'edit');\n\nconst localIcons = getLocalIcons();\nconst localIconOptions = localIcons.map(item => ({\n  label: () => (\n    <div class=\"flex-y-center gap-16px\">\n      <SvgIcon localIcon={item} class=\"text-icon\" />\n      <span>{item}</span>\n    </div>\n  ),\n  value: item\n}));\n\nconst showLayout = computed(() => model.value.parentId === 0);\n\nconst showPage = computed(() => model.value.menuType === '2');\n\nconst pageOptions = computed(() => {\n  const allPages = [...props.allPages];\n\n  if (model.value.routeName && !allPages.includes(model.value.routeName)) {\n    allPages.unshift(model.value.routeName);\n  }\n\n  const opts: CommonType.Option[] = allPages.map(page => ({\n    label: page,\n    value: page\n  }));\n\n  return opts;\n});\n\nconst layoutOptions: CommonType.Option[] = [\n  {\n    label: 'base',\n    value: 'base'\n  },\n  {\n    label: 'blank',\n    value: 'blank'\n  }\n];\n\n/** the enabled role options */\nconst roleOptions = ref<CommonType.Option<string>[]>([]);\n\nasync function getRoleOptions() {\n  const { error, data } = await fetchGetAllRoles();\n\n  if (!error) {\n    const options = data.map(item => ({\n      label: item.roleName,\n      value: item.roleCode\n    }));\n\n    roleOptions.value = [...options];\n  }\n}\n\n/** - add a query input */\nfunction addQuery(index: number) {\n  model.value.query.splice(index + 1, 0, {\n    key: '',\n    value: ''\n  });\n}\n\n/** - remove a query input */\nfunction removeQuery(index: number) {\n  model.value.query.splice(index, 1);\n}\n\n/** - add a button input */\nfunction addButton(index: number) {\n  model.value.buttons.splice(index + 1, 0, {\n    code: '',\n    desc: ''\n  });\n}\n\n/** - remove a button input */\nfunction removeButton(index: number) {\n  model.value.buttons.splice(index, 1);\n}\n\nasync function handleInitModel() {\n  model.value = createDefaultModel();\n\n  if (!props.rowData) return;\n\n  await nextTick();\n\n  if (props.operateType === 'addChild') {\n    const { id } = props.rowData;\n\n    Object.assign(model.value, { parentId: id });\n  }\n\n  if (props.operateType === 'edit') {\n    const { component, ...rest } = props.rowData;\n\n    const { layout, page } = getLayoutAndPage(component);\n    const { path, param } = getPathParamFromRoutePath(rest.routePath);\n\n    Object.assign(model.value, rest, { layout, page, routePath: path, pathParam: param });\n  }\n\n  if (!model.value.query) {\n    model.value.query = [];\n  }\n  if (!model.value.buttons) {\n    model.value.buttons = [];\n  }\n}\n\nfunction closeDrawer() {\n  visible.value = false;\n}\n\nfunction handleUpdateRoutePathByRouteName() {\n  if (model.value.routeName) {\n    model.value.routePath = getRoutePathByRouteName(model.value.routeName);\n  } else {\n    model.value.routePath = '';\n  }\n}\n\nfunction handleUpdateI18nKeyByRouteName() {\n  if (model.value.routeName) {\n    model.value.i18nKey = `route.${model.value.routeName}` as App.I18n.I18nKey;\n  } else {\n    model.value.i18nKey = null;\n  }\n}\n\nfunction getSubmitParams() {\n  const { layout, page, pathParam, ...params } = model.value;\n\n  const component = transformLayoutAndPageToComponent(layout, page);\n  const routePath = getRoutePathWithParam(model.value.routePath, pathParam);\n\n  params.component = component;\n  params.routePath = routePath;\n\n  return params;\n}\n\nasync function handleSubmit() {\n  await validate();\n\n  const params = getSubmitParams();\n\n  console.log('params: ', params);\n\n  // request\n  window.$message?.success($t('common.updateSuccess'));\n  closeDrawer();\n  emit('submitted');\n}\n\nwatch(visible, () => {\n  if (visible.value) {\n    handleInitModel();\n    resetFields();\n    getRoleOptions();\n  }\n});\n\nwatch(\n  () => model.value.routeName,\n  () => {\n    handleUpdateRoutePathByRouteName();\n    handleUpdateI18nKeyByRouteName();\n  }\n);\n</script>\n\n<template>\n  <AModal v-model:open=\"visible\" :title=\"title\" width=\"800px\">\n    <div class=\"h-480px\">\n      <SimpleScrollbar>\n        <AForm ref=\"formRef\" :model=\"model\" :rules=\"rules\" :label-col=\"{ lg: 8, xs: 4 }\" label-wrap class=\"pr-20px\">\n          <ARow>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.menuType')\" name=\"menuType\">\n                <ARadioGroup v-model:value=\"model.menuType\" :disabled=\"disabledMenuType\">\n                  <ARadio v-for=\"item in menuTypeOptions\" :key=\"item.value\" :value=\"item.value\">\n                    {{ $t(item.label) }}\n                  </ARadio>\n                </ARadioGroup>\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.menuName')\" name=\"menuName\">\n                <AInput v-model:value=\"model.menuName\" :placeholder=\"$t('page.manage.menu.form.menuName')\" />\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.routeName')\" name=\"routeName\">\n                <AInput v-model:value=\"model.routeName\" :placeholder=\"$t('page.manage.menu.form.routeName')\" />\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.routePath')\" name=\"routePath\">\n                <AInput v-model:value=\"model.routePath\" disabled :placeholder=\"$t('page.manage.menu.form.routePath')\" />\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.pathParam')\" name=\"pathParam\">\n                <AInput v-model:value=\"model.pathParam\" :placeholder=\"$t('page.manage.menu.form.pathParam')\" />\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem v-if=\"showLayout\" :label=\"$t('page.manage.menu.layout')\" name=\"layout\">\n                <ASelect\n                  v-model:value=\"model.layout\"\n                  :options=\"layoutOptions\"\n                  :placeholder=\"$t('page.manage.menu.form.layout')\"\n                />\n              </AFormItem>\n            </ACol>\n            <ACol v-if=\"showPage\" :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.page')\" name=\"page\">\n                <ASelect\n                  v-model:value=\"model.page\"\n                  :options=\"pageOptions\"\n                  :placeholder=\"$t('page.manage.menu.form.page')\"\n                />\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.i18nKey')\" name=\"i18nKey\">\n                <AInput v-model:value=\"model.i18nKey as string\" :placeholder=\"$t('page.manage.menu.form.i18nKey')\" />\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.order')\" name=\"order\">\n                <AInputNumber\n                  v-model:value=\"model.order as number\"\n                  class=\"w-full\"\n                  :placeholder=\"$t('page.manage.menu.form.order')\"\n                />\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.iconTypeTitle')\" name=\"iconType\">\n                <ARadioGroup v-model:value=\"model.iconType\">\n                  <ARadio v-for=\"item in menuIconTypeOptions\" :key=\"item.value\" :value=\"item.value\">\n                    {{ $t(item.label) }}\n                  </ARadio>\n                </ARadioGroup>\n              </AFormItem>\n            </ACol>\n\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.icon')\" name=\"icon\">\n                <template v-if=\"model.iconType === '1'\">\n                  <AInput v-model:value=\"model.icon\" :placeholder=\"$t('page.manage.menu.form.icon')\" class=\"flex-1\">\n                    <template #suffix>\n                      <SvgIcon v-if=\"model.icon\" :icon=\"model.icon\" class=\"text-icon\" />\n                    </template>\n                  </AInput>\n                </template>\n                <template v-if=\"model.iconType === '2'\">\n                  <ASelect\n                    v-model:value=\"model.icon\"\n                    :placeholder=\"$t('page.manage.menu.form.localIcon')\"\n                    :options=\"localIconOptions\"\n                  />\n                </template>\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.menuStatus')\" name=\"status\">\n                <ARadioGroup v-model:value=\"model.status\">\n                  <ARadio v-for=\"item in enableStatusOptions\" :key=\"item.value\" :value=\"item.value\">\n                    {{ $t(item.label) }}\n                  </ARadio>\n                </ARadioGroup>\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.keepAlive')\" name=\"keepAlive\">\n                <ARadioGroup v-model:value=\"model.keepAlive\">\n                  <ARadio :value=\"true\">{{ $t('common.yesOrNo.yes') }}</ARadio>\n                  <ARadio :value=\"false\">{{ $t('common.yesOrNo.no') }}</ARadio>\n                </ARadioGroup>\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.constant')\" name=\"constant\">\n                <ARadioGroup v-model:value=\"model.constant\">\n                  <ARadio value>\n                    {{ $t('common.yesOrNo.yes') }}\n                  </ARadio>\n                  <ARadio :value=\"false\">\n                    {{ $t('common.yesOrNo.no') }}\n                  </ARadio>\n                </ARadioGroup>\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.href')\" name=\"href\">\n                <AInput v-model:value=\"model.href as string\" :placeholder=\"$t('page.manage.menu.form.href')\" />\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.hideInMenu')\" name=\"hideInMenu\">\n                <ARadioGroup v-model:value=\"model.hideInMenu\">\n                  <ARadio :value=\"true\">{{ $t('common.yesOrNo.yes') }}</ARadio>\n                  <ARadio :value=\"false\">{{ $t('common.yesOrNo.no') }}</ARadio>\n                </ARadioGroup>\n              </AFormItem>\n            </ACol>\n            <ACol v-if=\"model.hideInMenu\" :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.activeMenu')\" name=\"activeMenu\">\n                <ASelect\n                  v-model:value=\"model.activeMenu as string\"\n                  :options=\"pageOptions\"\n                  clearable\n                  :placeholder=\"$t('page.manage.menu.form.activeMenu')\"\n                />\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.multiTab')\" name=\"multiTab\">\n                <ARadioGroup v-model:value=\"model.multiTab\">\n                  <ARadio value :label=\"$t('common.yesOrNo.yes')\" />\n                  <ARadio :value=\"false\" :label=\"$t('common.yesOrNo.no')\" />\n                </ARadioGroup>\n              </AFormItem>\n            </ACol>\n            <ACol :lg=\"12\" :xs=\"24\">\n              <AFormItem :label=\"$t('page.manage.menu.fixedIndexInTab')\" name=\"fixedIndexInTab\">\n                <AInputNumber\n                  v-model:value=\"model.fixedIndexInTab as number\"\n                  class=\"w-full\"\n                  clearable\n                  :placeholder=\"$t('page.manage.menu.form.fixedIndexInTab')\"\n                />\n              </AFormItem>\n            </ACol>\n            <ACol :span=\"24\">\n              <AFormItem :label-col=\"{ span: 4 }\" :label=\"$t('page.manage.menu.query')\" name=\"query\">\n                <AButton v-if=\"model.query.length === 0\" type=\"dashed\" block @click=\"addQuery(-1)\">\n                  <template #icon>\n                    <icon-carbon-add class=\"align-sub text-icon\" />\n                  </template>\n                  <span class=\"ml-8px\">{{ $t('common.add') }}</span>\n                </AButton>\n                <template v-else>\n                  <div v-for=\"(item, index) in model.query\" :key=\"index\" class=\"flex gap-3\">\n                    <ACol :span=\"9\">\n                      <AFormItem :name=\"['query', index, 'key']\">\n                        <AInput\n                          v-model:value=\"item.key\"\n                          :placeholder=\"$t('page.manage.menu.form.queryKey')\"\n                          class=\"flex-1\"\n                        />\n                      </AFormItem>\n                    </ACol>\n                    <ACol :span=\"9\">\n                      <AFormItem :name=\"['query', index, 'value']\">\n                        <AInput\n                          v-model:value=\"item.value\"\n                          :placeholder=\"$t('page.manage.menu.form.queryValue')\"\n                          class=\"flex-1\"\n                        />\n                      </AFormItem>\n                    </ACol>\n                    <ACol :span=\"5\">\n                      <ASpace class=\"ml-12px\">\n                        <AButton size=\"middle\" @click=\"addQuery(index)\">\n                          <template #icon>\n                            <icon-ic:round-plus class=\"align-sub text-icon\" />\n                          </template>\n                        </AButton>\n                        <AButton size=\"middle\" @click=\"removeQuery(index)\">\n                          <template #icon>\n                            <icon-ic-round-remove class=\"align-sub text-icon\" />\n                          </template>\n                        </AButton>\n                      </ASpace>\n                    </ACol>\n                  </div>\n                </template>\n              </AFormItem>\n            </ACol>\n            <ACol :span=\"24\">\n              <AFormItem :label-col=\"{ span: 4 }\" :label=\"$t('page.manage.menu.button')\" name=\"buttons\">\n                <AButton v-if=\"model.buttons.length === 0\" type=\"dashed\" block @click=\"addButton(-1)\">\n                  <template #icon>\n                    <icon-carbon-add class=\"align-sub text-icon\" />\n                  </template>\n                  <span class=\"ml-8px\">{{ $t('common.add') }}</span>\n                </AButton>\n                <template v-else>\n                  <div v-for=\"(item, index) in model.buttons\" :key=\"index\" class=\"flex gap-3\">\n                    <ACol :span=\"9\">\n                      <AFormItem :name=\"['buttons', index, 'code']\">\n                        <AInput\n                          v-model:value=\"item.code\"\n                          :placeholder=\"$t('page.manage.menu.form.buttonCode')\"\n                          class=\"flex-1\"\n                        ></AInput>\n                      </AFormItem>\n                    </ACol>\n                    <ACol :span=\"9\">\n                      <AFormItem :name=\"['buttons', index, 'desc']\">\n                        <AInput\n                          v-model:value=\"item.desc\"\n                          :placeholder=\"$t('page.manage.menu.form.buttonDesc')\"\n                          class=\"flex-1\"\n                        ></AInput>\n                      </AFormItem>\n                    </ACol>\n                    <ACol :span=\"5\">\n                      <ASpace class=\"ml-12px\">\n                        <AButton size=\"middle\" @click=\"addButton(index)\">\n                          <template #icon>\n                            <icon-ic:round-plus class=\"align-sub text-icon\" />\n                          </template>\n                        </AButton>\n                        <AButton size=\"middle\" @click=\"removeButton(index)\">\n                          <template #icon>\n                            <icon-ic-round-remove class=\"align-sub text-icon\" />\n                          </template>\n                        </AButton>\n                      </ASpace>\n                    </ACol>\n                  </div>\n                </template>\n              </AFormItem>\n            </ACol>\n          </ARow>\n        </AForm>\n      </SimpleScrollbar>\n    </div>\n    <template #footer>\n      <ASpace justify=\"end\" :size=\"16\">\n        <AButton @click=\"closeDrawer\">{{ $t('common.cancel') }}</AButton>\n        <AButton type=\"primary\" @click=\"handleSubmit\">{{ $t('common.confirm') }}</AButton>\n      </ASpace>\n    </template>\n  </AModal>\n</template>\n\n<style scoped></style>\n","<script setup lang=\"tsx\">\ndefineOptions({\n  name: \"manage_menu\"\n});\n\nimport { ref } from 'vue';\nimport { Button, Popconfirm, Tag } from 'ant-design-vue';\nimport type { Ref } from 'vue';\nimport { useBoolean } from '@sa/hooks';\nimport { fetchGetAllPages, fetchGetMenuList } from '@/service/api';\nimport { useTable, useTableOperate, useTableScroll } from '@/hooks/common/table';\nimport { $t } from '@/locales';\nimport { yesOrNoRecord } from '@/constants/common';\nimport { enableStatusRecord, menuTypeRecord } from '@/constants/business';\nimport SvgIcon from '@/components/custom/svg-icon.vue';\nimport MenuOperateModal, { type OperateType } from './modules/menu-operate-modal.vue';\n\nconst { bool: visible, setTrue: openModal } = useBoolean();\nconst { tableWrapperRef, scrollConfig } = useTableScroll();\n\nconst { columns, columnChecks, data, loading, pagination, getData, getDataByPage } = useTable({\n  apiFn: fetchGetMenuList,\n  columns: () => [\n    {\n      key: 'id',\n      title: $t('page.manage.menu.id'),\n      align: 'center',\n      dataIndex: 'id'\n    },\n    {\n      key: 'menuType',\n      title: $t('page.manage.menu.menuType'),\n      align: 'center',\n      width: 80,\n      customRender: ({ record }) => {\n        const tagMap: Record<Api.SystemManage.MenuType, string> = {\n          1: 'default',\n          2: 'processing'\n        };\n\n        const label = $t(menuTypeRecord[record.menuType]);\n\n        return <Tag color={tagMap[record.menuType]}>{label}</Tag>;\n      }\n    },\n    {\n      key: 'menuName',\n      title: $t('page.manage.menu.menuName'),\n      align: 'center',\n      minWidth: 120,\n      customRender: ({ record }) => {\n        const { i18nKey, menuName } = record;\n\n        const label = i18nKey ? $t(i18nKey) : menuName;\n\n        return <span>{label}</span>;\n      }\n    },\n    {\n      key: 'icon',\n      title: $t('page.manage.menu.icon'),\n      align: 'center',\n      width: 60,\n      customRender: ({ record }) => {\n        const icon = record.iconType === '1' ? record.icon : undefined;\n\n        const localIcon = record.iconType === '2' ? record.icon : undefined;\n\n        return (\n          <div class=\"flex-center\">\n            <SvgIcon icon={icon} localIcon={localIcon} class=\"text-icon\" />\n          </div>\n        );\n      }\n    },\n    {\n      key: 'routeName',\n      title: $t('page.manage.menu.routeName'),\n      align: 'center',\n      dataIndex: 'routeName',\n      minWidth: 120\n    },\n    {\n      key: 'routePath',\n      title: $t('page.manage.menu.routePath'),\n      align: 'center',\n      dataIndex: 'routePath',\n      minWidth: 120\n    },\n    {\n      key: 'status',\n      title: $t('page.manage.menu.menuStatus'),\n      align: 'center',\n      width: 80,\n      customRender: ({ record }) => {\n        if (record.status === null) {\n          return null;\n        }\n\n        const tagMap: Record<Api.Common.EnableStatus, string> = {\n          1: 'success',\n          2: 'warning'\n        };\n\n        const label = $t(enableStatusRecord[record.status]);\n\n        return <Tag color={tagMap[record.status]}>{label}</Tag>;\n      }\n    },\n    {\n      key: 'hideInMenu',\n      title: $t('page.manage.menu.hideInMenu'),\n      dataIndex: 'hideInMenu',\n      align: 'center',\n      width: 80,\n      customRender: ({ record }) => {\n        const hide: CommonType.YesOrNo = record.hideInMenu ? 'Y' : 'N';\n\n        const tagMap: Record<CommonType.YesOrNo, string> = {\n          Y: 'error',\n          N: 'default'\n        };\n\n        const label = $t(yesOrNoRecord[hide]);\n\n        return <Tag color={tagMap[hide]}>{label}</Tag>;\n      }\n    },\n    {\n      key: 'parentId',\n      dataIndex: 'parentId',\n      title: $t('page.manage.menu.parentId'),\n      width: 90,\n      align: 'center'\n    },\n    {\n      key: 'order',\n      dataIndex: 'order',\n      title: $t('page.manage.menu.order'),\n      align: 'center',\n      width: 60\n    },\n    {\n      key: 'operate',\n      title: $t('common.operate'),\n      align: 'center',\n      width: 230,\n      customRender: ({ record }) => (\n        <div class=\"flex-center justify-end gap-8px\">\n          {record.menuType === '1' && (\n            <Button type=\"primary\" ghost size=\"small\" onClick={() => handleAddChildMenu(record)}>\n              {$t('page.manage.menu.addChildMenu')}\n            </Button>\n          )}\n          <Button type=\"primary\" ghost size=\"small\" onClick={() => handleEdit(record)}>\n            {$t('common.edit')}\n          </Button>\n          <Popconfirm title={$t('common.confirmDelete')} onConfirm={() => handleDelete(record.id)}>\n            <Button danger ghost size=\"small\">\n              {$t('common.delete')}\n            </Button>\n          </Popconfirm>\n        </div>\n      )\n    }\n  ]\n});\n\nconst { checkedRowKeys, rowSelection, onBatchDeleted, onDeleted } = useTableOperate(data, getData);\n\nconst operateType = ref<OperateType>('add');\n\nfunction handleAdd() {\n  operateType.value = 'add';\n  openModal();\n}\n\nasync function handleBatchDelete() {\n  // request\n\n  onBatchDeleted();\n}\n\nfunction handleDelete(id: number) {\n  // request\n  console.log(id);\n\n  onDeleted();\n}\n/** the edit menu data or the parent menu data when adding a child menu */\nconst editingData: Ref<Api.SystemManage.Menu | null> = ref(null);\n\nfunction handleEdit(item: Api.SystemManage.Menu) {\n  operateType.value = 'edit';\n  editingData.value = { ...item };\n\n  openModal();\n}\n\nfunction handleAddChildMenu(item: Api.SystemManage.Menu) {\n  operateType.value = 'addChild';\n\n  editingData.value = { ...item };\n\n  openModal();\n}\n\nconst allPages = ref<string[]>([]);\n\nasync function getAllPages() {\n  const { data: pages } = await fetchGetAllPages();\n  allPages.value = pages || [];\n}\n\nfunction init() {\n  getAllPages();\n}\n\n// init\ninit();\n</script>\n\n<template>\n  <div class=\"min-h-500px flex-col-stretch gap-16px overflow-hidden lt-sm:overflow-auto\">\n    <ACard\n      :title=\"$t('page.manage.menu.title')\"\n      :bordered=\"false\"\n      :body-style=\"{ flex: 1, overflow: 'hidden' }\"\n      class=\"flex-col-stretch sm:flex-1-hidden card-wrapper\"\n    >\n      <template #extra>\n        <TableHeaderOperation\n          v-model:columns=\"columnChecks\"\n          :disabled-delete=\"checkedRowKeys.length === 0\"\n          :loading=\"loading\"\n          @add=\"handleAdd\"\n          @delete=\"handleBatchDelete\"\n          @refresh=\"getData\"\n        />\n      </template>\n      <ATable\n        ref=\"tableWrapperRef\"\n        :columns=\"columns\"\n        :data-source=\"data\"\n        :row-selection=\"rowSelection\"\n        size=\"small\"\n        :loading=\"loading\"\n        row-key=\"id\"\n        :scroll=\"scrollConfig\"\n        :pagination=\"pagination\"\n        class=\"h-full\"\n      />\n      <MenuOperateModal\n        v-model:visible=\"visible\"\n        :operate-type=\"operateType\"\n        :row-data=\"editingData\"\n        :all-pages=\"allPages\"\n        @submitted=\"getDataByPage\"\n      />\n    </ACard>\n  </div>\n</template>\n\n<style scoped></style>\n"],"file":"assets/index-CYD-b7cy.js"}